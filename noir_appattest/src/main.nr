use bigcurve::BigCurve;
use bignum::BigNum;
use bigcurve::curves::secp256r1::Secp256r1Fq;

pub global MAX_CERT_LENGTH: u32 = 1024;
pub global MAX_AUTHDATA_LENGTH: u32 = 1024;

fn main(
    root_cert: BoundedVec<u8, MAX_CERT_LENGTH>,
    intermediate_cert: BoundedVec<u8, MAX_CERT_LENGTH>,
    leaf_cert: BoundedVec<u8, MAX_CERT_LENGTH>,
    auth_data: BoundedVec<u8, MAX_AUTHDATA_LENGTH>,
    public_key_x: Secp256r1Fq,
    public_key_y: Secp256r1Fq,
) {
    assert(root_cert.len() == intermediate_cert.len());
    assert(intermediate_cert.len() == leaf_cert.len());
}

#[test]
fn test_main() {
    let root_cert: BoundedVec<u8, MAX_CERT_LENGTH> = BoundedVec::from_array([
        0x30, 0x82, 0x02, 0x21, 0x30, 0x82, 0x01, 0xa7, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x10,
        0x0b, 0xf3, 0xbe, 0x0e, 0xf1, 0xcd, 0xd2, 0xe0, 0xfb, 0x8c, 0x6e, 0x72, 0x1f, 0x62, 0x17,
        0x98, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x03, 0x30, 0x52,
        0x31, 0x26, 0x30, 0x24, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x1d, 0x41, 0x70, 0x70, 0x6c,
        0x65, 0x20, 0x41, 0x70, 0x70, 0x20, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
        0x6f, 0x6e, 0x20, 0x52, 0x6f, 0x6f, 0x74, 0x20, 0x43, 0x41, 0x31, 0x13, 0x30, 0x11, 0x06,
        0x03, 0x55, 0x04, 0x0a, 0x0c, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x63,
        0x2e, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x0a, 0x43, 0x61, 0x6c,
        0x69, 0x66, 0x6f, 0x72, 0x6e, 0x69, 0x61, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x30, 0x33,
        0x31, 0x38, 0x31, 0x38, 0x33, 0x32, 0x35, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x35, 0x30, 0x33,
        0x31, 0x35, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x30, 0x52, 0x31, 0x26, 0x30, 0x24,
        0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x1d, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x41, 0x70,
        0x70, 0x20, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52,
        0x6f, 0x6f, 0x74, 0x20, 0x43, 0x41, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0a,
        0x0c, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x31, 0x13, 0x30,
        0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x0a, 0x43, 0x61, 0x6c, 0x69, 0x66, 0x6f, 0x72,
        0x6e, 0x69, 0x61, 0x30, 0x76, 0x30, 0x10, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02,
        0x01, 0x06, 0x05, 0x2b, 0x81, 0x04, 0x00, 0x22, 0x03, 0x62, 0x00, 0x04, 0x45, 0x31, 0xe1,
        0x98, 0xb5, 0xb4, 0xec, 0x04, 0xda, 0x15, 0x02, 0x04, 0x57, 0x04, 0xed, 0x4f, 0x87, 0x72,
        0x72, 0xd7, 0x61, 0x35, 0xb2, 0x61, 0x16, 0xcf, 0xc8, 0x8b, 0x61, 0x5d, 0x0a, 0x00, 0x07,
        0x19, 0xba, 0x69, 0x85, 0x8d, 0xfe, 0x77, 0xca, 0xa3, 0xb8, 0x39, 0xe0, 0x20, 0xdd, 0xd6,
        0x56, 0x14, 0x14, 0x04, 0x70, 0x28, 0x31, 0xe4, 0x3f, 0x70, 0xb8, 0x8f, 0xd6, 0xc3, 0x94,
        0xb6, 0x08, 0xea, 0x2b, 0xd6, 0xae, 0x61, 0xe9, 0xf5, 0x98, 0xc1, 0x2f, 0x46, 0xaf, 0x52,
        0x93, 0x72, 0x66, 0xe5, 0x7f, 0x14, 0xeb, 0x61, 0xfe, 0xc5, 0x30, 0xf7, 0x14, 0x4f, 0x53,
        0x81, 0x2e, 0x35, 0xa3, 0x42, 0x30, 0x40, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01,
        0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d,
        0x0e, 0x04, 0x16, 0x04, 0x14, 0xac, 0x91, 0x10, 0x53, 0x33, 0xbd, 0xbe, 0x68, 0x41, 0xff,
        0xa7, 0x0c, 0xa9, 0xe5, 0xfa, 0xea, 0xe5, 0xe5, 0x8a, 0xa1, 0x30, 0x0e, 0x06, 0x03, 0x55,
        0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x0a, 0x06, 0x08,
        0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x03, 0x03, 0x68, 0x00, 0x30, 0x65, 0x02, 0x30,
        0x42, 0x01, 0x46, 0x9c, 0x1c, 0xaf, 0xb2, 0x25, 0x5b, 0xa5, 0x32, 0xb0, 0x4a, 0x06, 0xb4,
        0x90, 0xfd, 0x1e, 0xf0, 0x47, 0x83, 0x4b, 0x8f, 0xac, 0x42, 0x64, 0xef, 0x6f, 0xbb, 0xe7,
        0xe7, 0x73, 0xb9, 0xf8, 0x54, 0x57, 0x81, 0xe2, 0xe1, 0xa4, 0x9d, 0x3a, 0xca, 0xc0, 0xb9,
        0x3e, 0xb3, 0xb2, 0x02, 0x31, 0x00, 0xa7, 0x95, 0x38, 0xc4, 0x38, 0x04, 0x82, 0x59, 0x45,
        0xec, 0x49, 0xf7, 0x55, 0xc1, 0x37, 0x89, 0xec, 0x59, 0x66, 0xd2, 0x9e, 0x62, 0x7a, 0x6a,
        0xb6, 0x28, 0xd5, 0xa3, 0x21, 0x6b, 0x69, 0x65, 0x48, 0xc9, 0xdf, 0xdd, 0x81, 0xa9, 0xe6,
        0xad, 0xdb, 0x82, 0xd5, 0xb9, 0x93, 0x04, 0x6c, 0x03,
    ]);
    let intermediate_cert: BoundedVec<u8, MAX_CERT_LENGTH> = BoundedVec::from_array([1, 2, 3]);
    let leaf_cert: BoundedVec<u8, MAX_CERT_LENGTH> = BoundedVec::from_array([1, 2, 3]);
    let auth_data: BoundedVec<u8, MAX_CERT_LENGTH> = BoundedVec::from_array([1, 2, 3]);

    let public_key_x: Secp256r1Fq = BigNum {
        limbs: [0xd54378ffd74c0a0692ea56dc91e14a, 0xa683ef4c166c55cfb8d135863fc8f9, 0xaa1d],
    };
    let public_key_y: Secp256r1Fq = BigNum {
        limbs: [0x6b6c3604db3440d3dc4ee95a24f0f0, 0xc4eae722e511eeb583122a0f6ab255, 0x4b36],
    };

    main(
        root_cert,
        intermediate_cert,
        leaf_cert,
        auth_data,
        public_key_x,
        public_key_y,
    );
}
